#!/usr/bin/env bash
set -e

# get the absolute path of the executable
SELF_PATH=$(cd -P -- "$(dirname -- "$0")" && pwd -P) && SELF_PATH=$SELF_PATH/$(basename -- "$0")

# resolve symlinks
while [[ -h $SELF_PATH ]]; do
    # 1) cd to directory of the symlink
    # 2) cd to the directory of where the symlink points
    # 3) get the pwd
    # 4) append the basename
    DIR=$(dirname -- "$SELF_PATH")
    SYM=$(readlink "$SELF_PATH")
    SELF_PATH=$(cd "$DIR" && cd "$(dirname -- "$SYM")" && pwd)/$(basename -- "$SYM")
done

TASKER_FILE="tasker-cli"

source $(dirname $SELF_PATH)/tasker-core

function init { # add tasker in current project
  local installMethod=$(_install-method)
  local packageManager=$(_package-manager $installMethod)

  _install-tasker $installMethod
  _create-tasker $packageManager
}

function _install-method {
  whiptail \
    --title "how to install?" \
    --menu "" 11 60 4 \
    1 "yarn add @thecotne/tasker" \
    2 "yarn add @thecotne/tasker --dev" \
    3 "npm install @thecotne/tasker --save" \
    4 "npm install @thecotne/tasker --save-dev" \
    5 "composer require thecotne/tasker" \
    6 "composer require --dev thecotne/tasker" \
    2>&1 >/dev/tty
}

function _package-manager {
  if [[ $1 -eq 1 || $1 -eq 2 ]]; then
    echo "yarn"
  elif [[ $1 -eq 3 || $1 -eq 4 ]]; then
    echo "npm"
  elif [[ $1 -eq 5 || $1 -eq 6 ]]; then
    echo "composer"
  else
    exit 0
  fi
}

function _install-tasker {
  case $1 in
    1)
      yarn add @thecotne/tasker
      ;;
    2)
      yarn add @thecotne/tasker --dev
      ;;
    3)
      npm install @thecotne/tasker --save
      ;;
    4)
      npm install @thecotne/tasker --save-dev
      ;;
    5)
      composer require thecotne/tasker
      ;;
    6)
      composer require --dev thecotne/tasker
      ;;
  esac
}

function _create-tasker {
  cp "./node_modules/@thecotne/tasker/tasker-$1" tasker
}

_bootstrap "${@}"
